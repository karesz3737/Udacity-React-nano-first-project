{"ast":null,"code":"const api = \"https://reactnd-books-api.udacity.com\"; // Generate a unique token for storing your bookshelf data on the backend server.\n\nlet token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token\n};\nexport const get = bookId => fetch(`${api}/books/${bookId}`, {\n  headers\n}).then(res => res.json()).then(data => data.book);\nexport const getAll = () => fetch(`${api}/books`, {\n  headers\n}).then(res => res.json()).then(data => data);\nexport const update = (book, shelf) => fetch(`${api}/books/${book.id}`, {\n  method: \"PUT\",\n  headers: { ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    shelf\n  })\n}).then(res => res.json());\nexport const search = query => fetch(`${api}/search`, {\n  method: \"POST\",\n  headers: { ...headers,\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    query\n  })\n}).then(res => res.json()).then(data => data.books);","map":{"version":3,"sources":["/Users/kerteszkaroly/Downloads/reactnd-project-myreads-starter-master 111/src/BooksAPI.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","then","res","json","data","book","getAll","update","shelf","id","method","body","JSON","stringify","search","query","books"],"mappings":"AAAA,MAAMA,GAAG,GAAG,uCAAZ,C,CAEA;;AACA,IAAIC,KAAK,GAAGC,YAAY,CAACD,KAAzB;AACA,IAAI,CAACA,KAAL,EACEA,KAAK,GAAGC,YAAY,CAACD,KAAb,GAAqBE,IAAI,CAACC,MAAL,GAC1BC,QAD0B,CACjB,EADiB,EAE1BC,MAF0B,CAEnB,CAAC,CAFkB,CAA7B;AAIF,MAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE,kBADM;AAEdC,EAAAA,aAAa,EAAER;AAFD,CAAhB;AAKA,OAAO,MAAMS,GAAG,GAAIC,MAAD,IACjBC,KAAK,CAAE,GAAEZ,GAAI,UAASW,MAAO,EAAxB,EAA2B;AAAEJ,EAAAA;AAAF,CAA3B,CAAL,CACGM,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAUA,IAAI,CAACC,IAFvB,CADK;AAKP,OAAO,MAAMC,MAAM,GAAG,MACpBN,KAAK,CAAE,GAAEZ,GAAI,QAAR,EAAiB;AAAEO,EAAAA;AAAF,CAAjB,CAAL,CACGM,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IAAUA,IAFlB,CADK;AAKP,OAAO,MAAMG,MAAM,GAAG,CAACF,IAAD,EAAOG,KAAP,KACpBR,KAAK,CAAE,GAAEZ,GAAI,UAASiB,IAAI,CAACI,EAAG,EAAzB,EAA4B;AAC/BC,EAAAA,MAAM,EAAE,KADuB;AAE/Bf,EAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,oBAAgB;AAFT,GAFsB;AAM/BgB,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,IAAAA;AAAF,GAAf;AANyB,CAA5B,CAAL,CAOGP,IAPH,CAOSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAPjB,CADK;AAUP,OAAO,MAAMW,MAAM,GAAIC,KAAD,IACpBf,KAAK,CAAE,GAAEZ,GAAI,SAAR,EAAkB;AACrBsB,EAAAA,MAAM,EAAE,MADa;AAErBf,EAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,oBAAgB;AAFT,GAFY;AAMrBgB,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEE,IAAAA;AAAF,GAAf;AANe,CAAlB,CAAL,CAQGd,IARH,CAQSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EARjB,EASGF,IATH,CASSG,IAAD,IAAUA,IAAI,CAACY,KATvB,CADK","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token)\n  token = localStorage.token = Math.random()\n    .toString(36)\n    .substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n"]},"metadata":{},"sourceType":"module"}